services:
  web:
    image: nginx
    volumes:
      - ./.docker/conf/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./drupal:/var/www/html
    labels:
      - "traefik.http.routers.${PROJECT_NAME}_web.rule=Host(`${PROJECT_BASE_URL}`)"
    restart: always
    depends_on:
      - php
      - db
      - redis
  php:
    build: .docker
    restart: always
    volumes:
      - ./.docker/conf/php/php.ini:/usr/local/etc/php/conf.d/php.ini
      - ./.docker/conf/php/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini
      - ./drupal:/var/www/html
  db:
    image: postgres:15
    restart: always
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - 5432:5432
    volumes:
      - ./.docker/conf/postgres/:/docker-entrypoint-initdb.d/
      - postgres-data:/var/lib/postgresql/data
  traefik:
    image: traefik:v2.0
    command: --api.insecure=true --providers.docker
    ports:
      - "${PROJECT_PORT}:80"
      - '8080:8080' # Dashboard
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  node:
    labels:
      - "traefik.http.routers.${PROJECT_NAME}_node.rule=Host(`node.${PROJECT_BASE_URL}`)"
      - "traefik.http.services.${PROJECT_NAME}_node.loadbalancer.server.port=3000"
    image: druxt-events-app
    expose:
      - "3000"
    depends_on:
      - php
    build:
      context: ./react
      target: dev
      dockerfile: Dockerfile
    volumes:
      - ./react:/app
      - /app/node_modules
      - /app/.next
  varnish:
    depends_on:
      - web
    image: varnish:7.4
    volumes:
      - .docker/varnish/default.vcl:/etc/varnish/default.vcl:ro
    command: [ "varnishd", "-F", "-f", "/etc/varnish/default.vcl", "-a", "0.0.0.0:8080", "-s", "malloc,256m" ]
    labels:
      - "traefik.http.services.${PROJECT_NAME}_varnish.loadbalancer.server.port=6081"
      - "traefik.http.routers.${PROJECT_NAME}_varnish.rule=Host(`varnish.${PROJECT_BASE_URL}`)"
  redis:
    image: redis:latest
    restart: unless-stopped
    tty: true
    ports:
      - "6379:6379"
    volumes:
      - redis:/bitnami/redis/data
    environment:
      ALLOW_EMPTY_PASSWORD: 'yes'
volumes:
  postgres-data: {}
  redis: {}